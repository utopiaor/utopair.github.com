<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[一起来玩路由器之目标篇]]></title>
      <url>/2017/11/09/2017-11-09%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%8E%A9%E8%B7%AF%E7%94%B1%E5%99%A8%E4%B9%8B%E7%9B%AE%E6%A0%87%E7%AF%87/</url>
      <content type="html"><![CDATA[<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>第一次接触网络还是初中的时候，那时候学校搞信息化试点，给我们上了几节电脑课，具体学什么已经忘了，只记得后来有人在电脑上装上了红警，从此一发不可收拾，许多同学沉迷网络游戏，贻误学业。<br>那个年代，网络如同洪水猛兽，小孩猎奇，大人警惕。<br>那时我就想，网络是什么？这种好奇心很快就被QQ上闪动的头像取代。<br>我们步入一个新的时代。<br><a id="more"></a><br>大学读的是通信工程专业，第一门编程语言课是C++程序设计，看着黑黑的窗口打出hello world的字样，我的内心没有半点激动，甚至觉得无比的枯燥乏味。那是一个失败的课程，至今记忆犹新。<br>后来开了计算机网络课程，学完之后，七层模型烂熟于心，可我依然觉得那是天书。天书可以用来讲段子，考试前许多人找我给他讲段子，因为大家都不懂，我的段子讲得比较好。后来大家考试都写了好多段子。<br>读研的时候，也许是想要讲一个好段子，又重新选了计算机网络这门课。老师是用英文授课的，还记得老师经常调侃班上的几个黑人留学生，让他们回答问题。可是当我认真学完课程之后，连段子都不会讲了。<br>从此，我的心中萌生一个念头—智商的差距是无法弥补的。<br>知道工作以后，从事网络相关的工作的开发，才一点一点的理解了，什么是编程，什么是网络，什么是计算机组成机构。<br>这也是写这一系列文章的初衷之一，真正告别那个年代，告别那懵懂的年岁，美好的年华和错过的花儿。<br>写这一系列的文章，有三个愿景：</p>
<ol>
<li>梳理知识结构<br>工作快三年了，学了很多，积累了一定的经验，也遇到很多困难，而最让人头疼的是感觉自己的专业知识很零碎，不成体系，便想借写此系列文章好好梳理一下自己的知识体系。悟已往之不谏，知来者之可追，希望自己在技术的道路上，可以更上一层楼。</li>
<li>感恩开源社区<br>这一年混迹于许多开源社区，业余很多时间都花在github、恩山无线论坛、openwrt社区上，感谢那么多人愿意分享自己的知识、心得，在此写这一系列文章也算是回馈社区，致敬开源共享精神。</li>
<li>分享自己的知识<br>我认为知识是用来分享的，技术只有通过分享、交流才能碰撞出新的火花，在此也希望这一系列文章能够给嵌入式开发的新手一点启示，在工作、学习的路上少走一些弯路。<br>接下来便进入正题，本目标篇主要从以下几个方面阐述：</li>
</ol>
<ul>
<li>文章体系</li>
<li>学习目标</li>
<li>功能目标<h2 id="文章体系"><a href="#文章体系" class="headerlink" title="文章体系"></a>文章体系</h2>本系列文章拟从以下几个方面铺陈，从原理和实践两个维度循序展开，这是一个长期的过程</li>
<li>硬件平台选型及分析<br>选用华为HG255D路由器作为开发平台</li>
<li>引导程序分析与改造<br>采用Uboot作为引导程序</li>
<li>openwrt分析与研究</li>
<li>路由器功能设计与实现<br>根据个人喜好，为路由器添加个性化功能<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2>因为本系列文章自带梳理知识体系愿景的属性，从而学习目标成为重中之重，初步拟定要实现以下目标</li>
<li>完善CPU体系架构知识体系<br>深入研究mips体系架构和指令集</li>
<li>透彻分析引导程序<br>透彻分析Uboot启动代码，在Uboot上移植uip网络协议栈，同时完成Uboot的改造，使其具有简单的任务管理、内存管理、中断管理、锁和并发机制，成为一个小型的玩具操作系统。</li>
<li>深入理解openwrt软件架构<br>openwrt的核心思想在于其软件架构，这里试图深入分析研究openwrt系统的组织、编译和设计思想</li>
<li>深入研究linux内核<br>linux内核是一个庞然大物，这里说是深入研究，也不过是沧海一粟罢了，本系列文章也试图从一些侧面深入研究下linux内核</li>
<li>具备定制个性化路由器功能的能力<br>学习openwrt的ipk包管理体系、luci框架，在此基础上做定制开发</li>
<li>深入理解、应用网络协议<br>深入分析研究TCP/IP协议栈，梳理出从应用层到驱动层报文转发的全路径，并掌握常用的网络分析工具和调试方法<h2 id="功能目标"><a href="#功能目标" class="headerlink" title="功能目标"></a>功能目标</h2>既然文章题目叫一起来玩路由器，玩作为本系列文章的萌属性，也是不容小觑的，拟完成以下功能目标</li>
<li>传统路由器功能</li>
<li>不死boot</li>
<li>wan多拨</li>
<li>挂载移动硬盘</li>
<li>挂载无线网卡</li>
<li>自动破解wifi密码</li>
<li>SSR科学上网</li>
<li>家庭私有云</li>
<li>挂载USB摄像头监控</li>
<li>无线审计</li>
<li>脱机下载</li>
<li>内网穿透</li>
<li>常用服务器搭建</li>
<li>广告屏蔽</li>
<li>portal推送和认证</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 一起来玩路由器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派编译最新内核并升级固件]]></title>
      <url>/2017/10/22/2017-10-22-11-30%E6%A0%91%E8%8E%93%E6%B4%BE%E7%BC%96%E8%AF%91%E6%9C%80%E6%96%B0%E5%86%85%E6%A0%B8%E5%B9%B6%E5%8D%87%E7%BA%A7%E5%9B%BA%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派编译最新内核并升级固件"><a href="#树莓派编译最新内核并升级固件" class="headerlink" title="树莓派编译最新内核并升级固件"></a>树莓派编译最新内核并升级固件</h2><p>本文描述树莓派编译官网最新内核并且将树莓派的固件升级成最新内核的方法</p>
<h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3>]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派启动流程分析]]></title>
      <url>/2017/10/22/2017-10-22-11-30%E6%A0%91%E8%8E%93%E6%B4%BE%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%20/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派bootloader启动流程分析"><a href="#树莓派bootloader启动流程分析" class="headerlink" title="树莓派bootloader启动流程分析"></a>树莓派bootloader启动流程分析</h2><p>本文分析树莓派从上电启动到linux内核启动整个流程，关于linux内核引导之后的流程那是后话，本文不涉及</p>
<p>首先需要说明的是，树莓派不是完整意义上的开源硬件，系统启动这一块的代码是没有的，git官网镜像提供的是已经编译好的二进制文件，我想正式树莓派这种半开源的模式成就了树莓派，一来保证了芯片供应商博通的商业利益，二来有效防止了树莓派的仿冒，从而让树莓派在开源硬件的竞争中站稳了脚跟。虽然没有源代码，关于树莓派启动这一块的分析还是可以大致分析的，下面就来简单分析下树莓派的启动流程。</p>
<p>为了降低成本，树莓派省去了传统计算机用来存储引导加载程序的板载存储器(BIOS), 直接把引导程序放在了SD卡中。树莓派2具有一款博通的BCM2836系统芯片, 当启动时，ARM Cortex-A7的CPU会处于复位状态,由VideoCore IV GPU核心负责启动系统,也就是boot的启动是由GPU code来完成，而不是cpu，这是与一般ARM架构的处理器不一样的地方。<br><a id="more"></a><br>首先罗列下树莓派启动会用到的文件</p>
<blockquote>
<p>pi@raspberrypi ~ $ ls -a /boot/<br>.                       COPYING.linux     LICENSE.oracle<br>..                      fixup_cd.dat      overlays<br>bcm2708-rpi-b.dtb       fixup.dat         start_cd.elf<br>bcm2708-rpi-b-plus.dtb  fixup_db.dat      start_db.elf<br>bcm2708-rpi-cm.dtb      fixup_x.dat       start.elf<br>bcm2709-rpi-2-b.dtb     issue.txt         start_x.elf<br>bootcode.bin            kernel7.img       System Volume Information<br>cmdline.txt             kernel.img<br>config.txt              LICENCE.broadcom</p>
</blockquote>
<h3 id="bootloader第一阶段"><a href="#bootloader第一阶段" class="headerlink" title="bootloader第一阶段"></a>bootloader第一阶段</h3><p>树莓派的启动是有GPU和CPU协同工作完成的，上电后，首先运行的是SOC里面的一个小核心（secure core），secure core是在SOC内的FLASH预先烧录的一端程序，这段程序检查OTP并运行SOC rom内的程序，rom内的程序会初始化一些设备，但其最主要的功能是用来引导boot的第二阶段，第二阶段的程序位于SD卡的/boot目录下的bootcode.bin，是我们烧录进去的。</p>
<h3 id="bootloader第二阶段"><a href="#bootloader第二阶段" class="headerlink" title="bootloader第二阶段"></a>bootloader第二阶段</h3><p>bootloader第二阶段的程序是bootcode.bin，这个bin文件相当于GPU的引导文件，bootcode.bin会初始化SDRAM然后从SD卡上检索GPU固件（start.elf），然后运行它，从而启动GPU</p>
<h3 id="bootloader第三阶段"><a href="#bootloader第三阶段" class="headerlink" title="bootloader第三阶段"></a>bootloader第三阶段</h3><p>第三阶段的程序是start.elf，GPU加载执行start.elf来负责图像输出工作，start.elf读取config.txt来设置图像输出格式，在完成Video Core IV的初始化之后，start.elf会读取cmdline.txt，cmdline.txt包含内核运行的参数，用来初始化CPU的clock和串口等设备，然后将kernel.img加载到GPU分配的共享内存里，最后触发CPU的reset，将引导工作交付给CPU </p>
<p>这里比较有意思的是start.elf除了传递基本的内核参数给CPU，也会传递一些额外的参数，比如DMA通道、GPU参数、MAC地址、eMMC时钟速度和内核寻址范围等等，额外传递的参数如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dma.dmachans=0x7f35</div><div class="line">bcm2708_fb.fbwidth=1280</div><div class="line">bcm2708_fb.fbheight=1024</div><div class="line">bcm2708.boardrev=0xe</div><div class="line">bcm2708.serial=0xd9b35572</div><div class="line">smsc95xx.macaddr=B8:27:EB:B3:55:72</div><div class="line">sdhci-bcm2708.emmc_clock_freq=250000000</div><div class="line">vc_mem.mem_base=0xec00000</div><div class="line">vc_mem.mem_size=0x10000000</div><div class="line">console=ttyAMA0,115200</div><div class="line">kgdboc=ttyAMA0,115200</div><div class="line">console=tty1</div><div class="line">root=/dev/mmcblk0p2</div><div class="line">rootfstype=ext4</div><div class="line">rootwait</div></pre></td></tr></table></figure></p>
<p>而这些参数在主流的内核里是没有的</p>
<h3 id="bootloader第四阶段"><a href="#bootloader第四阶段" class="headerlink" title="bootloader第四阶段"></a>bootloader第四阶段</h3><p>这一阶段的启动就是嵌入开发中常规的引导过程，CPU复位之后，执行kernel.img，将内核解压缩并启动start_kernel，完成一系列设备的初始化，启动0号进程init_task（内核态）,继而启动1号进程kthread（内核态），kthread负责执行内核的部分初始化工作及进行系统配置并创建若干个用于高速缓存和虚拟主存管理的内核线程，然后kthread调用execve运行init函数（内核态），然后演变成用户态1号进程，即init进程（用户态），用户态init按照配置文件/etc/initab的要求，完成系统启动工作，创建编号为1号、2号…的若干终端注册进程getty，最终进入应用程序</p>
<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h2><p>由于树莓派上电启动过程中用到的二进制文件代码都不是开源的，所以树莓派不像一般的CPU bootloader启动方式，但这并不影响我们使用树莓派，毕竟我们也不必老是折腾启动，同时由于树莓派的这种启动方式，导致了树莓派不是一个裸机ARM，就会出现了无法像单片机一样直接对树莓派编程，也需要其核心引导之后进入系统才行，因此拿树莓派来做裸机开发就不合适了。</p>
<p>值得说明的是，由于树莓派的启动核心VideoCore IV是博通的Broadcom BCM2836， 这块芯片是博通特供树莓派使用的，一般人拿不到博通的这块芯片的，博通也不会提供技术支持，树莓派核心显卡的程序是无法移植到其他的芯片上去的，所以市面上树莓派基本没有假的。</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派硬件分析]]></title>
      <url>/2017/10/21/2017-10-21-12-09%E6%A0%91%E8%8E%93%E6%B4%BE%E7%A1%AC%E4%BB%B6%E5%88%86%E6%9E%90%20/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派硬件分析"><a href="#树莓派硬件分析" class="headerlink" title="树莓派硬件分析"></a>树莓派硬件分析</h2><p>众里寻他千百度，青天白夜荡谷歌，纵观整个网络，没有找到一篇详细介绍树莓派硬件设计的文章，不免唏嘘。树莓派作为一款开源卡片式电脑，基于Broadcom商业策略的考虑，硬件没有完全开源，可以理解，但是对于硬件已经开源的部分，很少人来分析、研究和扩展，我理解树莓派的生态在硬件层面上是有一定残缺的。<br>Anyway,树莓派作为一款“开源硬件”，其价值并不在于硬件的扩展性，而在于软件设计，Geek们利用树莓派开放的GPIO的硬件能力，构建起了庞大的软件生态，可以说，树莓派其实是一个基于硬件的软件开源平台。<br>下面，我简单分析下树莓派的硬件设计。</p>
<h2 id="原理图及datasheet下载"><a href="#原理图及datasheet下载" class="headerlink" title="原理图及datasheet下载"></a>原理图及datasheet下载</h2><p>树莓派的第一手资料，当然要去github <a href="https://github.com/raspberrypi" target="_blank" rel="external">raspberry</a>官方镜像获取</p>
<ul>
<li>树莓派2B+原理图下载<br><a href="https://github.com/raspberrypi/documentation/blob/master/hardware/raspberrypi/schematics/README.md" target="_blank" rel="external">https://github.com/raspberrypi/documentation/blob/master/hardware/raspberrypi/schematics/README.md</a></li>
<li>主芯片SOC BCM2836及ARM A7 datasheet下载<br>BCM2836 ARM-local peripherals<br><a href="https://github.com/raspberrypi/documentation/blob/master/hardware/raspberrypi/bcm2836/QA7_rev3.4.pdf" target="_blank" rel="external">https://github.com/raspberrypi/documentation/blob/master/hardware/raspberrypi/bcm2836/QA7_rev3.4.pdf</a><br>ARM A7核心<br>Cortex-A7 MPcore Processor Reference Manual<br><a href="https://developer.arm.com/docs/ddi0464/latest/preface" target="_blank" rel="external">https://developer.arm.com/docs/ddi0464/latest/preface</a><br>需要注册ARM官网的账号才能下载  </li>
<li>网卡及串口芯片 LAN9514<br><a href="http://pdf1.alldatasheet.com/datasheet-pdf/view/347291/SMSC/LAN9514.html" target="_blank" rel="external">http://pdf1.alldatasheet.com/datasheet-pdf/view/347291/SMSC/LAN9514.html</a><a id="more"></a>
<h2 id="简单电路分析"><a href="#简单电路分析" class="headerlink" title="简单电路分析"></a>简单电路分析</h2>本人不是做硬件开发的，这里只是简单分析下树莓派2B+的电路，一切以够用为原则<h3 id="实物图简单标注"><a href="#实物图简单标注" class="headerlink" title="实物图简单标注"></a>实物图简单标注</h3></li>
<li>树莓派正面<br><img src="https://i.imgur.com/r4IV6Xo.png" alt=""><br>核心芯片为BCM2836，右边LAN9514为网卡及串口，Microchip公司生产的 LAN951x 是第一款工业的全集成、高速2.0 USB、高性能10/100M网络控制器，网卡接口及USB接口设计在了 LAN9154 的右边。USB供电系统旁边有三个转压芯片，这一部分区域是给系统提供4种电压。HDMI和音频是系统芯片内部的功能，主要按照数据手册里方式的进行连接。树莓派为双层板，正面布满系统需要的绝大部分元器件。</li>
<li>树莓派反面<br><img src="https://i.imgur.com/sZiD2aI.png" alt=""><br>PCB 板反面右边是SD卡接口，中心是一个19.2MHZ的晶振，对应正面中心的 BCM2836芯片<h3 id="树莓派硬件整体分析"><a href="#树莓派硬件整体分析" class="headerlink" title="树莓派硬件整体分析"></a>树莓派硬件整体分析</h3><h4 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h4><img src="https://i.imgur.com/Fk60fIE.png" alt=""><br>主要部件包括： <blockquote>
<p>ARMv7（主CPU，即Application Processor或AP）<br>博通独有的VideoCore IV（图像处理单元，即GPU）<br>只读ROM<br>一次性写入的OTP<br>512M SDRAM<br>控制核心secure core<br>集成的其它部件，如各种外设的controller等</p>
</blockquote>
</li>
</ul>
<p>其上电之初的整个过程完全由secure core控制<br>USB和ETH由BCM2836外接LAN9514驱动  </p>
<h4 id="电源电路分析"><a href="#电源电路分析" class="headerlink" title="电源电路分析"></a>电源电路分析</h4><p>在raspberryPi 2B+电路中有多种电压，5V，3V3，1V8，5V_CORE，VDD_CORE，PLL_VDD，RUN，H5V（HDMI用），AUD_3V3(audio用)，电源电路很复杂，我这里只是在整体上作大致的分析</p>
<ul>
<li>从输入到稳压5V<br><img src="https://i.imgur.com/7ZwSfaw.png" alt=""><br>从供电的输入端MicoUSB可以看出，该接口只有1和5号引脚起到供电作用，其他引脚悬空，没有USB串口功能，后边接到F1（MF-MSMF250/X），是自恢复保险丝，<a href="http://pdf1.alldatasheet.com/datasheet-pdf/view/521154/BOURNS/MF-MSMF250-16X.html" target="_blank" rel="external">MSMF250/16</a>具体参数如下图所示：<br><img src="https://i.imgur.com/JswsbUu.png" alt=""><br>可以看到该保险丝最大耐压16V，持续通过电流高达2.5A，峰值电流为5A<br>Q3是续流二极管，有防反接作用<br><a href="http://pdf1.alldatasheet.com/datasheet-pdf/view/104137/PHILIPS/BCM857BS.html" target="_blank" rel="external">BCM857BS</a>是NXP的一款PNP型三极管，其基本功能是作差分放大，这里与D5瞬态抑制二极管（TVS管）SMJ5.0a实现5V稳压，BCM857BS引脚图如下：<br><img src="https://i.imgur.com/ztbOiAj.png" alt=""></li>
<li>从5V稳压中分解出3V3和1V8<br><img src="https://i.imgur.com/f7c5rHu.png" alt=""><br>稳压后的5V电源接入PAM2306AYPKE芯片，PAM2306AYPKE为DC-DC开关稳压芯片，为树莓派CPU及外设提供1.8V和3.3V电压<br>PAM2306 datasheet中的典型设计如下<br><img src="https://i.imgur.com/cf8K7dE.png" alt=""><br>可见这里树莓派也是参考的典型设计  </li>
<li>从5V分解出5V_Core、RUN和SDRAM_LDO_Enable<br><img src="https://i.imgur.com/GCnxBL4.png" alt=""><br>可以看出，这里电路是通过5V和DMG2305 PMOS管得到5V_CORE、SDRAM的LDO使能信号和CPU的RUN信号<br>1V8电压通过Q8(PNP管)与5V电压一起为DMG2305提供栅源电压，使得PMOS导通<br>以下是DMG2305 datasheet中关于芯片的功能描述<br><img src="https://i.imgur.com/NSG0NTB.png" alt=""><br>可以看出，这里主要是为了减小DS漏源阻抗以及提高电源转换效率，目的是为了匹配高速的SDRAM和CPU的对Power的需求</li>
<li>5V_CORE通过NCP6343为SOC的I2C控制器提供初始化电平<br><img src="https://i.imgur.com/zCPlUQ4.png" alt=""><br><a href="https://www.onsemi.com/PowerSolutions/product.do?id=NCP6343&amp;pdf=Y" target="_blank" rel="external">NC6343</a>是降压芯片，datasheet中关于芯片的描述为<br><img src="https://i.imgur.com/tNpr95g.png" alt=""><br>可见，NCP6343是为ARM7 SMPCore中的I2C Memory提供动态电压<h4 id="BCM2836起振与供电"><a href="#BCM2836起振与供电" class="headerlink" title="BCM2836起振与供电"></a>BCM2836起振与供电</h4><img src="https://i.imgur.com/Pcm8qgS.png" alt=""><br>可以看出，BCM2836的供电电压是1V8并且要提供RUN电平，后面是19.2MHZ的晶振<h4 id="复位与指示灯电路"><a href="#复位与指示灯电路" class="headerlink" title="复位与指示灯电路"></a>复位与指示灯电路</h4><img src="https://i.imgur.com/bYixD5M.png" alt=""><br><a href="http://pdf1.alldatasheet.com/datasheet-pdf/view/337534/DIODES/APX803.html" target="_blank" rel="external">APX803</a>在系统上电的时候RST，这时候2号线输出低电平，3v3通过R5和R8分压到PWR_LOW_N,随后RST置位成高电平，从而在PWR_LOW_N产生一个电平跳变，为SOC提供复位<br>由于SOC启动后，PWR_LOW_N保持低电平，从而开启Q1（P-FET）点亮RED led<h4 id="Camera电路"><a href="#Camera电路" class="headerlink" title="Camera电路"></a>Camera电路</h4><img src="https://i.imgur.com/eFzRtSm.png" alt=""><br>引脚直接接到SOC的相应引脚上<h4 id="DSI接口LCD电路"><a href="#DSI接口LCD电路" class="headerlink" title="DSI接口LCD电路"></a>DSI接口LCD电路</h4><img src="https://i.imgur.com/SNl5Ra9.png" alt=""><br>同样，引脚直接接到SOC相应引脚上<h4 id="音频电路"><a href="#音频电路" class="headerlink" title="音频电路"></a>音频电路</h4><img src="https://i.imgur.com/2UQXTAx.png" alt=""><br>这里核心的器件是NC7WZ16，是个高速双向缓冲器，主要是为了提高PWM信号的转换速度，当PWM为高电平时，信号高速通过，当为低电平时，输入输出为高阻态，既有效传输了音频信号，由做到了信号的隔离<br>其他大量的电阻和电容，都是为了滤波，为输出提供高质量的数字信号<h4 id="HDMI接口电路"><a href="#HDMI接口电路" class="headerlink" title="HDMI接口电路"></a>HDMI接口电路</h4><img src="https://i.imgur.com/IgS0rQa.png" alt=""><br>HDMI接口的引脚也是直接接到SOC的相应引脚上，值得一提的是左边的供电电路<br>RT9741CGV为显示器高压驱动芯片，HDMI转VGA显示器的VGA转换线就是从这部分获取电能，也就是从BCM857BS 5V稳压这里汲取电流，因为供电电源最高能提供2.5A的电流，最高也就是12.5W的功率，单CPU、GPU和WiFi蓝牙以及DISPLAY接口的功率都已经很高了，如果HDMI转接器仍通过该板卡供电的话，板子估计会吃不消，这也是为什么一些童鞋使用HDMI转VGA转接板显示花屏或者根本不显示的原因，建议使用VGA显示器的童鞋们，最好使用自带供电的HDMI转接板。<h4 id="GPIO电路"><a href="#GPIO电路" class="headerlink" title="GPIO电路"></a>GPIO电路</h4><img src="https://i.imgur.com/6HJniOQ.png" alt=""><br>这里没什么好说的，BCM2836的GPIO直接接到板卡的GPIO引脚上，这里有个需要注意的地方，板卡上是没有GPIO0和GPIO1的，具体见原理图的tips说明<br><img src="https://i.imgur.com/Nvk197m.png" alt=""><br>意思是说GPIO0和GPIO1被设置成ID_SD和ID_SC模式，在SOC上电时读取EEPROM的ID号，然后驱动GPIO的automagic 安装，具体要干嘛我也不知道，反正这两个GPIO不要使用就可以了<br>GPIO的电路虽然简单，但后续我们玩树莓派，主要就是利用这些GPIO的硬件能力，作为GPIO、I2C、SPI和UART等，了解下这些GPIO还是有必要的，这里附上一张树莓派GPIO的引脚对照图以备参考<br><img src="https://i.imgur.com/nEN4ayO.png" alt=""></li>
</ul>
<p>到这里，树莓派2B+的整个电路原理图已经基本分析完了，还是很简单的，但需要说明的是，官方提供的原理图不完整，还有许多细节没给出来，想要抄板仿制出来一个树莓派基本不可能了<br>有个关键性器件LAN9514 USB与网卡芯片电路图没有给出来，这里补上一张LAN9514 的系统框图供参考<br><img src="https://i.imgur.com/vqdAqcq.png" alt=""><br>官方文档上指出，USB接口供电源与板卡的供电源电路做了相应的隔离设计，防止像以前版本的树莓派在接带有外置电源的USB HUB时可能会出现倒灌电流的现象，但是你为什么不给出原理图呢，是不是还有别的坑没填呢。<br>到此，树莓派的硬件分析完毕</p>
<h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>许多人一看到稍微大一点电路的原理图时就犯怵，这是很正常的，一开始我拿到树莓派的原理图时也很懵，一看里面的许多器件都没见过，这时候就需要耐下心来，一个一个模块来分析<br>我总结看懂电路图原理的四个要点是</p>
<ul>
<li>识别元件</li>
<li>看清走线</li>
<li>模块划分</li>
<li>分析原理<br>然后按部就班地分解电路图<br>电路一定是按模块设计出来的，所以分析也要一个一个模块来分析   </li>
</ul>
<p>我分析电路原理图的一般步骤正如上文所描述的那样</p>
<ul>
<li>分析电源电路<br>一般一个板子的电源电路是最复杂也是最有意思的，分析清楚电源电路，接下来的模块电路分析就简单了</li>
<li>分析主芯片供电、复位和起振电路<br>这个比较简单，也就是最小系统能跑起来的基本条件</li>
<li>模块电路分析<br>模块电路分析要抓住核心器件，查看核心器件的datasheet，围绕这个核心器件来分析会事半功倍</li>
</ul>
<h3 id="不是题外话的题外话"><a href="#不是题外话的题外话" class="headerlink" title="不是题外话的题外话"></a>不是题外话的题外话</h3><p>随着物联网的兴起，现在开源硬件的热潮一波又一波，在这些浪潮之中的开源板卡有很多，比如Arduino、Raspberry、BeagleBlack、Intel Galileo、Intel MinNowBoard,Intel UpBoard，还有国产的香蕉派、香橙派、CubieBoard和96 Board等等，这么多板卡，能够处在浪潮之巅并且蜂拥前进的屈指可数，也就是Arduino、Raspberry和BeagleBlack了<br>其实板卡的做工、功能都差不多，为什么大多开源硬件都逃不出一波热，开锅熟，继而无人问津了呢<br>我理解主要有两点</p>
<ul>
<li>软件生态的完备程度<br>Arduino和其他板卡不同，是一块单片机，把单片机玩出生态，所以热度一直不减<br>树莓派受RS社区的推动，并且在全世界有一堆的传道者，其生态可以说是最完备的,虽然硬件没有完全开源，但依然阻止不了Geek们蠢蠢欲动的心<br>BeagleBlack虽然热度没有Raspberry那么热，但是由于其硬件全开源，社区也很活跃，投入的玩家也越来越多<br>反观Intel的系列板卡，采用的不是ARM核心，在众多玩家心里，ARM就意味着开源，X86、Atom想来搭开源硬件的顺风车，路漫漫其修远兮<br>而国产板卡的受众主要是国人，众多周知，国人在这一块的玩法较欧美国家还是要差一些的，最主要的是在国内，要建立起一个良好的社区氛围不容易，都有一颗Geek心，奈何完不成Geek的梦</li>
<li>服务质量的良莠程度<br>这里不得不说的是，国产各种派的服务简直是不能人语，资料没法找，技术支持永远不在服务区，板卡上电启动冒烟无人理，你说这样的服务能把开源板卡做起来<br>在这里默默祭奠下我英年早逝的香橙派，我才上电啊，你怎么就冒烟了。。。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派网络环境配置(Wire+STA+AP)]]></title>
      <url>/2017/10/19/2017-10-19-21-30%E6%A0%91%E8%8E%93%E6%B4%BE%E7%BD%91%E7%BB%9C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE-wire+sta+ap/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派网络配置"><a href="#树莓派网络配置" class="headerlink" title="树莓派网络配置"></a>树莓派网络配置</h2><p>raspberry pi不同系统版本的网络配置方法略有不同，需要阅读官方文档，针对具体的版本进行配置，<br>以下设置针对stretch版本，其他版本未作测试  </p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ul>
<li>有线接入公网</li>
<li>无线wlan0 作为STA</li>
<li>无线wlan1 作为AP，提供无线热点<a id="more"></a> 
<h3 id="有线网络"><a href="#有线网络" class="headerlink" title="有线网络"></a>有线网络</h3>树莓派接入有线网络，默认DHCP获取地址，这里配置static ip，方便后续维护管理</li>
<li>edit dhcpcd.conf</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim /etc/dhcpcd.conf</div></pre></td></tr></table></figure>
<p>在文件末尾添加以下内容,重启树莓派即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#static IP configuration</div><div class="line">interface eth0</div><div class="line">static ip_address=192.168.0.105/24</div><div class="line">static routers=192.168.0.1</div><div class="line">static domain_name_servers=192.168.0.1</div></pre></td></tr></table></figure></p>
<h3 id="无线网络"><a href="#无线网络" class="headerlink" title="无线网络"></a>无线网络</h3><ul>
<li>USB无线网卡<br>由于树莓派2B没有板载无线芯片，这里使用usb wireless dongle来实现，推荐使用免驱的USB dongle，可在树莓派的USB dongle支持列表里查看<a href="https://elinux.org/RPi_USB_Wi-Fi_Adapters" target="_blank" rel="external">https://elinux.org/RPi_USB_Wi-Fi_Adapters</a><br>无线网卡均支持STA模式，AP模式是否支持可从<a href="https://wireless.wiki.kernel.org/en/users/drivers" target="_blank" rel="external">https://wireless.wiki.kernel.org/en/users/drivers</a>查看<br>将两张USB dongle 插入树莓派的USB端口，查看型号<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ lsusb</div><div class="line">Bus 001 Device 006: ID 0bda:8179 Realtek Semiconductor Corp. RTL8188EUS 802.11n Wireless Network Adapter</div><div class="line">Bus 001 Device 005: ID 258a:001a</div><div class="line">Bus 001 Device 007: ID 093a:2532 Pixart Imaging, Inc.</div><div class="line">Bus 001 Device 004: ID 0bda:8176 Realtek Semiconductor Corp. RTL8188CUS 802.11n WLAN Adapter</div><div class="line">Bus 001 Device 003: ID 0424:ec00 Standard Microsystems Corp. SMSC9512/9514 Fast Ethernet Adapter</div><div class="line">Bus 001 Device 002: ID 0424:9514 Standard Microsystems Corp. SMC9514 Hub</div><div class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可见两款USB dongle的型号分别为RTL8188EUS和RTL8188CUS，都是RealTek的，官方文档表示该型号AP功能未测试，那么接下来我便实测一下<br><strong>Tips</strong></p>
<blockquote>
<p>树莓派在系统启动时会随机为无线网卡分配设备接口号，也就是两块USB Dongle的设备名 wlan0和wlan1会随机swap，但这并不影响使用</p>
</blockquote>
<h4 id="wlan0-STA设置"><a href="#wlan0-STA设置" class="headerlink" title="wlan0 STA设置"></a>wlan0 STA设置</h4><ul>
<li><p>配置 /etc/network/interfaces<br>在改文件里添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">allow-hotplug wlan0</div><div class="line">iface wlan0 inet manual</div><div class="line">pre-up wpa_supplicant -B w -D wext -i wlan0 -c /etc/wpa_supplicant/wpa_supplicant.conf</div><div class="line">post-down killall -q wpa_supplicant</div></pre></td></tr></table></figure>
</li>
<li><p>配置 /etc/wpa_supplicant/wpa_supplicant.conf</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">country=GB</div><div class="line">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev</div><div class="line">update_config=1</div><div class="line"></div><div class="line">network=&#123;</div><div class="line">    ssid=&quot;xxxxxx&quot;</div><div class="line">    psk=&quot;xxxxxx&quot;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中ssid和psk分别表示无线网络名称和密码</p>
<ul>
<li><p>配置 /etc/dhcpcd.conf<br>在文件末尾添加以下内容  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface wlan0</div><div class="line">static ip_address=192.168.0.116/24</div><div class="line">static routers=192.168.0.1</div><div class="line">static domain_name_servers=192.168.0.1</div></pre></td></tr></table></figure>
</li>
<li><p>重启树莓派，查看wlan0接入网络是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ ifconfig wlan0</div><div class="line">wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.0.116  netmask 255.255.255.0  broadcast 192.168.0.255</div><div class="line">        inet6 fe80::b80e:3e12:3882:fa4d  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 00:13:ef:81:00:0b  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 3064  bytes 524906 (512.6 KiB)</div><div class="line">        RX errors 0  dropped 44  overruns 0  frame 0</div><div class="line">        TX packets 46  bytes 6094 (5.9 KiB)</div><div class="line">        TX errors 0  dropped 3 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure>
</li>
</ul>
<p>可见wlan0已经分配地址192.168.0.116，wlan0作为STA设置完成  </p>
<h4 id="wlan1-AP设置"><a href="#wlan1-AP设置" class="headerlink" title="wlan1 AP设置"></a>wlan1 AP设置</h4><ul>
<li><p>准备工作<br>安装需要的软件包<br>hostapd—支持无线网卡作为无线热点使用<br>dnsmasq— 提供DHCP和DNS服务  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install hostapd dnsmasq</div></pre></td></tr></table></figure>
</li>
<li><p>修改/etc/dhcpcd.conf<br>禁止wlan1 DHCP功能，将其修改为静态ip地址，这个地址将做为后续我们wifi热点的网关地址<br>在/etc/dhcpcd.conf末尾添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">interface wlan1</div><div class="line">static ip_address=192.168.2.1/24</div></pre></td></tr></table></figure>
</li>
<li><p>配置 /etc/network/interfaces<br>在文件结尾添加以下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">allow-hotplug wlan1</div><div class="line">iface wlan1 inet manual</div></pre></td></tr></table></figure>
</li>
<li><p>重启dhcp服务和wlan1无线网卡配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service dhcpcd restart</div><div class="line">sudo ifdown wlan1</div><div class="line">sudo ifup   wlan</div></pre></td></tr></table></figure>
</li>
<li><p>配置hostapd</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">sudo vim etc/hostapd/hostapd.conf</div><div class="line"></div><div class="line">interface=wlan1</div><div class="line">driver=nl80211</div><div class="line">ssid=TP-LINK_1112_hot</div><div class="line">hw_mode=g</div><div class="line">channel=6</div><div class="line">wmm_enabled=1</div><div class="line">macaddr_acl=0</div><div class="line">auth_algs=1</div><div class="line">ignore_broadcast_ssid=0</div><div class="line">wpa=2</div><div class="line">wpa_passphrase=asdfghjkl_123</div><div class="line">wpa_key_mgmt=WPA-PSK</div><div class="line">rsn_pairwise=CCMP</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf</div><div class="line"></div><div class="line">Configuration file: /etc/hostapd/hostapd.conf</div><div class="line">Using interface wlan1 with hwaddr 00:13:ef:62:0b:ef and ssid &quot;TP-LINK_1112_hot&quot;</div><div class="line">wlan1: interface state UNINITIALIZED-&gt;ENABLED</div><div class="line">wlan1: AP-ENABLED</div></pre></td></tr></table></figure></p>
<p>wlan1: AP-ENABLED表明配置成功  </p>
<p>配置hostapd为自启动模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/default/hostapd</div></pre></td></tr></table></figure></p>
<p>将DAEMON_CONF 修改为DAEMON_CONF=”/etc/hostapd/hostapd.conf”</p>
<ul>
<li><p>配置DNSMASQ<br>为了实现上网功能，需要对DNSMASQ服务进行配置，首先备份一下系统默认的文件，然后创建一个新的配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">sudo mv /etc/dnsmasq.conf/etc/bak_dnsmasq.conf</div><div class="line">sudo vim /etc/dnsmasq.conf</div><div class="line"></div><div class="line">interface=wlan0</div><div class="line"></div><div class="line">bind-interfaces</div><div class="line"></div><div class="line">server=218.2.2.2</div><div class="line"></div><div class="line">server=114.114.114.114</div><div class="line"></div><div class="line">server=8.8.8.8</div><div class="line"></div><div class="line">domain-needed</div><div class="line"></div><div class="line">bogus-priv</div><div class="line"></div><div class="line">dhcp-range=192.168.2.2,192.168.2.254,12h</div></pre></td></tr></table></figure>
</li>
<li><p>设置IPV4内核转发<br>打开系统配置文件sysctl.conf,将IPV4转发那一行的#去掉  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward=1</div></pre></td></tr></table></figure>
</li>
</ul>
<p>下一次重启后会生效，如果不想现在重启，可以直接输入如下指令直接生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo sh -c &quot;echo 1 &gt;/proc/sys/net/ipv4/ip_forward&quot;</div></pre></td></tr></table></figure></p>
<ul>
<li>防火墙设置<br>为了实现树莓派以太网接口共享给wlan1上网，需要配置NAT，需先执行如下防火墙命令  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo iptables -F</div><div class="line">sudo iptables -X</div><div class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</div><div class="line">sudo iptables -A FORWARD -i eth0 -o wlan1 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">sudo iptables -A FORWARD -i wlan1 -o eth0 -j ACCEPT</div><div class="line">sudo bash -c iptables-save &gt; /etc/etc/iptables.ipv4.nat</div></pre></td></tr></table></figure>
</li>
</ul>
<p>编辑sudo vim /etc/network/if-pre-up.d/iptables<br>添加下面两行代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">/sbin/iptables-restore &lt; /etc/iptables.ipv4.nat</div></pre></td></tr></table></figure></p>
<p>sudo chmod 755 /etc/network/if-pre-up.d/iptables</p>
<ul>
<li><p>通过获取DHCPCD来运行NAT需要创建一个新文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /lib/dhcpcd/dhcpcd-hooks/70-ipv4-nat</div></pre></td></tr></table></figure>
</li>
<li><p>重启服务：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo service hostapd start</div><div class="line">sudo service dnsmasq start</div><div class="line">sudo reboot</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>重启树莓派后，输入ifconfig，得到以下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">pi@raspberrypi:~ $ ifconfig</div><div class="line">eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.0.106  netmask 255.255.255.0  broadcast 192.168.0.255</div><div class="line">        inet6 fe80::216c:c891:56cf:67  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether b8:27:eb:b3:69:7e  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 69  bytes 6676 (6.5 KiB)</div><div class="line">        RX errors 0  dropped 1  overruns 0  frame 0</div><div class="line">        TX packets 199  bytes 34379 (33.5 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line"></div><div class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</div><div class="line">        inet 127.0.0.1  netmask 255.0.0.0</div><div class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</div><div class="line">        loop  txqueuelen 1  (Local Loopback)</div><div class="line">        RX packets 36  bytes 5308 (5.1 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 36  bytes 5308 (5.1 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line"></div><div class="line">wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.0.116  netmask 255.255.255.0  broadcast 192.168.0.255</div><div class="line">        inet6 fe80::b80e:3e12:3882:fa4d  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 00:13:ef:81:00:0b  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 281  bytes 46958 (45.8 KiB)</div><div class="line">        RX errors 0  dropped 445  overruns 0  frame 0</div><div class="line">        TX packets 45  bytes 6194 (6.0 KiB)</div><div class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</div><div class="line"></div><div class="line">wlan1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</div><div class="line">        inet 192.168.2.1  netmask 255.255.255.0  broadcast 192.168.2.255</div><div class="line">        inet6 fe80::f6ba:c0c:8aa6:1285  prefixlen 64  scopeid 0x20&lt;link&gt;</div><div class="line">        ether 00:13:ef:62:0b:ef  txqueuelen 1000  (Ethernet)</div><div class="line">        RX packets 113  bytes 7493 (7.3 KiB)</div><div class="line">        RX errors 0  dropped 0  overruns 0  frame 0</div><div class="line">        TX packets 32  bytes 3980 (3.8 KiB)</div><div class="line">        TX errors 0  dropped 5 overruns 0  carrier 0  collisions 0</div></pre></td></tr></table></figure></p>
<p>eth0 wlan0 wlan1均已正常工作，good job！</p>
<p>但是用手机搜索热点，并没有找到SSID 为TP-LINK_1112_hot一项<br>查看进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep hostapd</div><div class="line"></div><div class="line">root       444  0.0  0.1   6168  1868 ?        Ss   00:12   0:00 /usr/sbin/hostapd -B -P /run/hostapd.pid /etc/hostapd/hostapd.conf</div><div class="line">pi         959  0.0  0.0   6200   564 pts/0    S+   00:18   0:00 grep --color=auto hostapd</div></pre></td></tr></table></figure></p>
<p>hostapd已经启动，重启试试<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sudo /usr/sbin/hostapd /etc/hostapd/hostapd.conf</div><div class="line"></div><div class="line">Configuration file: /etc/hostapd/hostapd.conf</div><div class="line">Using interface wlan1 with hwaddr 00:13:ef:62:0b:ef and ssid &quot;TP-LINK_1112_hot&quot;</div><div class="line">wlan1: interface state UNINITIALIZED-&gt;ENABLED</div><div class="line">wlan1: AP-ENABLED</div></pre></td></tr></table></figure></p>
<p>重启后手机可以搜索到这个热点，但是拿不到ip<br>ps查看是未启动dnsmasq服务<br>重启dnsmasq<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo service dnsmasq start</div></pre></td></tr></table></figure></p>
<p>现在手机可以连接到热点了，但是上不了网  </p>
<p>重新配置防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo iptables -F</div><div class="line">sudo iptables -X</div><div class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</div><div class="line">sudo iptables -A FORWARD -i eth0 -o wlan1 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">sudo iptables -A FORWARD -i wlan1 -o eth0 -j ACCEPT</div></pre></td></tr></table></figure></p>
<p>现在手机终于可以上网了</p>
<p>可以写个脚本，将这三项需要手动启动的项目开机自动启动<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sudo vim startHot.sh</div><div class="line"></div><div class="line">#!/bin/sh</div><div class="line">iptables -F</div><div class="line">iptables -X</div><div class="line">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</div><div class="line">iptables -A FORWARD -i eth0 -o wlan1 -m state --state RELATED,ESTABLISHED -j ACCEPT</div><div class="line">iptables -A FORWARD -i wlan1 -o eth0 -j ACCEPT</div><div class="line"></div><div class="line">service dnsmasq start</div><div class="line"></div><div class="line">/usr/sbin/hostapd /etc/hostapd/hostapd.conf</div></pre></td></tr></table></figure></p>
<p>编写开机自启脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">#BEGIN INIT INFO</div><div class="line"># Provides:          tightvncserver</div><div class="line"># Required-Start:    $local_fs</div><div class="line"># Required-Stop:     $local_fs</div><div class="line"># Default-Start:     2 3 4 5</div><div class="line"># Default-Stop:      0 1 6</div><div class="line"># Short-Description: Start/stop tightvncserver</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line"># More details see:</div><div class="line"># http://www.penguintutor.com/linux/tightvnc</div><div class="line"></div><div class="line">### Customize this entry</div><div class="line"># Set the USER variable to the name of the user to start tightvncserver under</div><div class="line">export USER=&apos;pi&apos;</div><div class="line">### End customization required</div><div class="line"></div><div class="line">eval cd ~$USER</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">  start)</div><div class="line">    su $USER -c &apos;/etc/init.d/startHot &gt;/dev/null&apos;</div><div class="line">    echo &quot;Starting hotserver server for $USER &quot;</div><div class="line">    ;;</div><div class="line">  stop)</div><div class="line">    su $USER -c &apos;/etc/init.d/startHot -kill :1&apos;</div><div class="line">    echo &quot;hotserver stopped&quot;</div><div class="line">    ;;</div><div class="line">  *)</div><div class="line">    echo &quot;Usage: /etc/init.d/hotserver &#123;start|stop&#125;&quot;</div><div class="line">    exit 1</div><div class="line">    ;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure></p>
<p>注册开机启动<br><code>sudo update-rc.d hotserver defaults</code></p>
<p>可是重启后并没有启动，应该是树莓派使用systemctl这种新型的服务启动方式了，暂时不折腾了<br>直接手动启动脚本吧<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo startHot &gt;/dev/null 2&amp;&gt;1 &amp;</div></pre></td></tr></table></figure></p>
<p>OK,热点已经启动，手机连接可以正常上网。</p>
<p>这里使用eth0-&gt;wlan1转发的，也可以配置防火墙，让wlan0-&gt;wlan1转发，就可以拔掉树莓派的网线啦！</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派基本配置与管理]]></title>
      <url>/2017/10/18/2017-10-18-20-30%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86%20/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派系统配置与管理"><a href="#树莓派系统配置与管理" class="headerlink" title="树莓派系统配置与管理"></a>树莓派系统配置与管理</h2><h3 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -y git build-essential vim tmux curl</div></pre></td></tr></table></figure>
<h3 id="ssh访问"><a href="#ssh访问" class="headerlink" title="ssh访问"></a>ssh访问</h3><p><strong>Tips</strong></p>
<blockquote>
<p>SSH disabled by default; can be enabled by creating a file with name “ssh” in boot partition<br>意思是说创建一个名叫”ssh”的文件在boot分区,就是内存卡的根目录<br> <a id="more"></a> </p>
<ul>
<li>安装nmap端口扫描工具，扫描本网段ip,windows下可使用PortScan工具<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nmap</div><div class="line">```  </div><div class="line">- 扫描raspberry ip  </div><div class="line">``` </div><div class="line">nmap -v -sn 192.168.0.1/10</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Nmap scan report for 192.168.0.106<br>Host is up (0.055s latency).<br>All 1000 scanned ports on 192.168.0.106 are closed  </p>
</blockquote>
<p>扫描到树莓派的ip为192.168.0.106<br><strong>这种扫描方式很慢，可直接用arp -a查看 arp缓存表</strong></p>
<ul>
<li>登录ssh<br>linux下登录  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh pi@192.168.0.106</div></pre></td></tr></table></figure>
</li>
</ul>
<p>windows下登录，使用mobaxterm<br><img src="https://i.imgur.com/uz81WeW.png" alt="">  </p>
<h3 id="vnc访问"><a href="#vnc访问" class="headerlink" title="vnc访问"></a>vnc访问</h3><ul>
<li>安装vnc服务  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install tightvncserver</div></pre></td></tr></table></figure>
<ul>
<li>启动vnc服务  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vncserver -depth 16 -geometry 800x600 :1</div></pre></td></tr></table></figure>
<ul>
<li>编写服务脚本  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">### BEGIN INIT INFO</div><div class="line"># Provides:          tightvncserver</div><div class="line"># Required-Start:    $local_fs</div><div class="line"># Required-Stop:     $local_fs</div><div class="line"># Default-Start:     2 3 4 5</div><div class="line"># Default-Stop:      0 1 6</div><div class="line"># Short-Description: Start/stop tightvncserver</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line"># More details see:</div><div class="line"># http://www.penguintutor.com/linux/tightvnc</div><div class="line"></div><div class="line">### Customize this entry</div><div class="line"># Set the USER variable to the name of the user to start tightvncserver under</div><div class="line">export USER=&apos;pi&apos;</div><div class="line">### End customization required</div><div class="line"></div><div class="line">eval cd ~$USER</div><div class="line"></div><div class="line">case &quot;$1&quot; in</div><div class="line">  start)</div><div class="line">    su $USER -c &apos;/usr/bin/tightvncserver -depth 16 -geometry 800x600 :1&apos;</div><div class="line">    echo &quot;Starting TightVNC server for $USER &quot;</div><div class="line">    ;;</div><div class="line">  stop)</div><div class="line">    su $USER -c &apos;/usr/bin/tightvncserver -kill :1&apos;</div><div class="line">    echo &quot;Tightvncserver stopped&quot;</div><div class="line">    ;;</div><div class="line">  *)</div><div class="line">    echo &quot;Usage: /etc/init.d/tightvncserver &#123;start|stop&#125;&quot;</div><div class="line">    exit 1</div><div class="line">    ;;</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure>
<ul>
<li><p>增加执行权限，并启动服务  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x /etc/init.d/tightvncserver</div><div class="line">sudo update-rc.d tightvncserver defaults</div><div class="line">sudo /etc/init.d/tightvncserver stop</div><div class="line">sudo /etc/init.d/tightvncserver start</div></pre></td></tr></table></figure>
</li>
<li><p>安装chkconfig， 并将vnc服务设为开机启动  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install chkconfig</div><div class="line">chkconfig --add tightvncserver</div><div class="line">chkconfig tightvncserver on</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Tips</strong></p>
<blockquote>
<p>这里重新启动后，vncservice服务并没有启动，需要手动启动,具体原因未知<br>sudo /etc/init.d/tightvncserver</p>
</blockquote>
<ul>
<li>客户端链接，使用mobaxterm的vnc客户端<br><img src="https://i.imgur.com/pOBvgqq.png" alt=""></li>
</ul>
<h3 id="远程桌面访问"><a href="#远程桌面访问" class="headerlink" title="远程桌面访问"></a>远程桌面访问</h3><p>安装xrdp服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install xrdp</div></pre></td></tr></table></figure></p>
<p>安装过后便可以用windows下的远程桌面工具 mstsc访问了</p>
<h3 id="raspi-config管理树莓派"><a href="#raspi-config管理树莓派" class="headerlink" title="raspi-config管理树莓派"></a>raspi-config管理树莓派</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo raspi-config</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/KQ7D9nc.png" alt=""><br>这里的配置工具里描述的比较详细，根据个人喜好和具体环境配置即可</p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基于Iotgo的物联网云端环境搭建]]></title>
      <url>/2017/10/16/2017-10-16-22-40%E5%9F%BA%E4%BA%8EIotgo%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E4%BA%91%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="Iotgo平台简介"><a href="#Iotgo平台简介" class="headerlink" title="Iotgo平台简介"></a>Iotgo平台简介</h1><p>IoTgo项目的初衷是想让用户可以像部署zencart搭建博客，安装 phpbb创建论坛一样，通过部署IoTgo建立自己的云端服务器,服务器不仅仅是接口开放，而是全部代码开源</p>
<hr>
<p><strong>github链接</strong><br>物联网平台及webUI<br><a href="https://github.com/itead/IoTgo" target="_blank" rel="external">https://github.com/itead/IoTgo</a><br>手机端app demo<br><a href="https://github.com/itead/IoTgo_Android_App" target="_blank" rel="external">https://github.com/itead/IoTgo_Android_App</a><br>Arduino库<br><a href="https://github.com/itead/ITEADLIB_Arduino_IoTgo" target="_blank" rel="external">https://github.com/itead/ITEADLIB_Arduino_IoTgo</a><br>树莓派，CB等卡片式电脑SDK<br><a href="https://github.com/itead/Segnix/tree/master/libraries/itead_IoTgo" target="_blank" rel="external">https://github.com/itead/Segnix/tree/master/libraries/itead_IoTgo</a>  </p>
<p>通信协议层支持HTTP Websocket，MQTT， CoAP  </p>
<p>其基本架构如下图所示<br><img src="https://i.imgur.com/Ef0oKXC.png" alt=""></p>
<hr>
 <a id="more"></a> 
<h1 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h1><h2 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h2><pre><code>主机：x86_64
操作系统: Ubuntu 16.04.3 LTS xenial
开发语言：html  javascript  python  go 
Web engine：nodejs
关系型数据库：mariaDB
NoSQL: mongoDB
开发依赖工具: git npm bower forever
</code></pre><h2 id="平台依赖环境安装"><a href="#平台依赖环境安装" class="headerlink" title="平台依赖环境安装"></a>平台依赖环境安装</h2><h3 id="NoSQL数据库mongoDB安装与配置"><a href="#NoSQL数据库mongoDB安装与配置" class="headerlink" title="NoSQL数据库mongoDB安装与配置"></a>NoSQL数据库mongoDB安装与配置</h3><ul>
<li><p>从官网下载最新版本mongodb-linux-ubuntu 16.04 -x64.tar包，解压<br><a href="http://www.mongodb.org/downloads" target="_blank" rel="external">http://www.mongodb.org/downloads</a>   </p>
</li>
<li><p>将解压后的文件复制到/usr/local/mongodb  </p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar xvf ubuntu 16.04 Linux 64-bit.tar`  </div><div class="line">sudo mkdir /usr/local/mongodb  `</div><div class="line">cp ./ mongodb-linux-ubuntu 16.04 -x64/* /usr/local/mongodb -rf</div></pre></td></tr></table></figure>
<ul>
<li>将mongodb的bin目录添加到PATH  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># /etc/profile: system-wide .profile file for the Bourne shell (sh(1))</div><div class="line"># and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).</div><div class="line"></div><div class="line">if [ &quot;$PS1&quot; ]; then</div><div class="line">  if [ &quot;$BASH&quot; ] &amp;&amp; [ &quot;$BASH&quot; != &quot;/bin/sh&quot; ]; then</div><div class="line">    # The file bash.bashrc already sets the default PS1.</div><div class="line">    # PS1=&apos;\h:\w\$ &apos;</div><div class="line">    if [ -f /etc/bash.bashrc ]; then</div><div class="line">      . /etc/bash.bashrc</div><div class="line">    fi</div><div class="line">  else</div><div class="line">    if [ &quot;`id -u`&quot; -eq 0 ]; then</div><div class="line">      PS1=&apos;# &apos;</div><div class="line">    else</div><div class="line">      PS1=&apos;$ &apos;</div><div class="line">    fi</div><div class="line">  fi</div><div class="line">fi</div><div class="line"></div><div class="line">if [ -d /etc/profile.d ]; then</div><div class="line">  for i in /etc/profile.d/*.sh; do</div><div class="line">    if [ -r $i ]; then</div><div class="line">      . $i</div><div class="line">    fi</div><div class="line">  done</div><div class="line">  unset i</div><div class="line">fi</div><div class="line">export PATH=$PATH:/usr/local/mongodb/bin</div></pre></td></tr></table></figure>
<p>source /etc/profile 配置立即生效  </p>
<ul>
<li>编辑mongod.conf<br>创建/etc/mongod.conf  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">vim /etc/mongod.conf   </div><div class="line">  </div><div class="line">#详细记录输出</div><div class="line">verbose = true</div><div class="line"># 指定服务端口号，默认端口27017</div><div class="line">port = 27017</div><div class="line"># 指定MongoDB日志文件，注意是指定文件不是目录</div><div class="line">logpath = /var/log/mongodb/logs/mongodb.log</div><div class="line"># 使用追加的方式写日志</div><div class="line">logappend = true</div><div class="line"># 指定数据库路径</div><div class="line">dbpath = /data/db/</div><div class="line">#设置每个数据库将被保存在一个单独的目录</div><div class="line">directoryperdb = true</div><div class="line"># 启用验证</div><div class="line">auth = false</div><div class="line">#以守护进程的方式运行MongoDB，创建服务器进程</div><div class="line">fork = true</div><div class="line">#安静输出</div><div class="line">quiet = true</div></pre></td></tr></table></figure>
<ul>
<li>创建配置文件中提到的用来保存文件的数据库目录，日志目录,日志文件  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /data/db/  </div><div class="line">sudo mkdir -p /var/log/mongodb/logs/  </div><div class="line">sudo touch /var/log/mongodb/logs/mongodb.log</div></pre></td></tr></table></figure>
<ul>
<li>编写脚本，注册开机启动  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">vim /etc/init.d/mongodb  </div><div class="line"></div><div class="line">#!/bin/sh</div><div class="line">#BEGIN INIT INFO</div><div class="line"># Provides:     mongodb</div><div class="line"># Required-Start:</div><div class="line"># Required-Stop:</div><div class="line"># Default-Start:        2 3 4 5</div><div class="line"># Default-Stop:         0 1 6</div><div class="line"># Short-Description: mongodb</div><div class="line"># Description: mongo db server</div><div class="line">### END INIT INFO</div><div class="line"></div><div class="line">. /lib/lsb/init-functions</div><div class="line"></div><div class="line">PROGRAM=/usr/local/mongodb/bin/mongod</div><div class="line">MONGOPID=`ps -ef | grep &apos;mongod&apos; | grep -v grep | awk &apos;&#123;print $2&#125;&apos;`</div><div class="line"></div><div class="line">test -x $PROGRAM || exit 0</div><div class="line">case &quot;$1&quot; in</div><div class="line">  start)</div><div class="line">     ulimit -n 3000</div><div class="line">     log_begin_msg &quot;Starting MongoDB server&quot;</div><div class="line">     $PROGRAM -f /etc/mongod.conf</div><div class="line">     log_end_msg 0</div><div class="line">     ;;</div><div class="line">  stop)</div><div class="line">     log_begin_msg &quot;Stopping MongoDB server&quot;</div><div class="line">     if [ ! -z &quot;$MONGOPID&quot; ]; then</div><div class="line">        kill -15 $MONGOPID</div><div class="line">     fi</div><div class="line">     log_end_msg 0</div><div class="line">     ;;</div><div class="line">  status)</div><div class="line">     ;;</div><div class="line">  *)</div><div class="line">     log_success_msg &quot;Usage: /etc/init.d/mongodb &#123;start|stop|status&#125;&quot;</div><div class="line">     exit 1</div><div class="line">esac</div><div class="line">exit 0</div></pre></td></tr></table></figure>
<ul>
<li>添加可执行权限  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod +x /etc/init.d/mongodb</div></pre></td></tr></table></figure>
<ul>
<li>注册开机脚本  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-rc.d mongodb defaults（移除用update-rc.d -f mongodb remove）</div></pre></td></tr></table></figure>
<ul>
<li>开启服务并测试连接  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo service mongodb start（停止服务用sudo service mongodb stop）  </div><div class="line">sudo mongo</div></pre></td></tr></table></figure>
<hr>
<h3 id="Node-js安装与配置"><a href="#Node-js安装与配置" class="headerlink" title="Node.js安装与配置"></a>Node.js安装与配置</h3><p>执行以下命令安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install -y python-software-properties software-properties-common</div><div class="line">sudo add-apt-repository ppa:chris-lea/node.js </div><div class="line">sudo apt-get update  </div><div class="line">sudo apt-get install nodejs</div></pre></td></tr></table></figure>
<p>node版本管理，升级到最新版本，否则后面编译会报错  </p>
<blockquote>
<p>npm ERR! Make sure you have the latest version of node.js and npm installed.<br>Npm更新到最新版本</p>
</blockquote>
<p>node的模块n是专门用来管理node.js的版本的<br>首先安装n模块  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g n</div></pre></td></tr></table></figure>
<p>升级node.js到最新稳定版  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n stable</div></pre></td></tr></table></figure>
<p>测试  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodejs -v</div></pre></td></tr></table></figure>
<blockquote>
<p>v4.2.6  </p>
</blockquote>
<p>表明已成功安装nodejs最新版本 </p>
<hr>
<h3 id="安装nodejs包管理工具"><a href="#安装nodejs包管理工具" class="headerlink" title="安装nodejs包管理工具"></a>安装nodejs包管理工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install npm</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装forever-让node应用作为系统服务使用"><a href="#安装forever-让node应用作为系统服务使用" class="headerlink" title="安装forever,让node应用作为系统服务使用"></a>安装forever,让node应用作为系统服务使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install forever -g</div></pre></td></tr></table></figure>
<hr>
<h3 id="安装bower，front-end包管理工具"><a href="#安装bower，front-end包管理工具" class="headerlink" title="安装bower，front-end包管理工具"></a>安装bower，front-end包管理工具</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g bower</div></pre></td></tr></table></figure>
<hr>
<h2 id="iotgo环境构建"><a href="#iotgo环境构建" class="headerlink" title="iotgo环境构建"></a>iotgo环境构建</h2><ul>
<li>从github导入代码  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/itead/IoTgo.git</div></pre></td></tr></table></figure>
<ul>
<li>安装python依赖   </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd IoTgo &amp;&amp; npm install</div></pre></td></tr></table></figure>
<ul>
<li>进入web app frontend 安装依赖 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd public/frontend &amp;&amp; sudo bower install –allow-root</div></pre></td></tr></table></figure>
<ul>
<li>进入web app backend 安装依赖  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ../backend &amp;&amp; sudo bower install –allow-root</div></pre></td></tr></table></figure>
<ul>
<li>配置iot, config.js为iotgo启动配置文件  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../..</div><div class="line">cp config.js.sample config.js</div></pre></td></tr></table></figure>
<ul>
<li>更改config.js  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  host: &apos;localhost&apos;,        // Hostname of IoTgo platform</div><div class="line">  db: &#123;                             </div><div class="line">    uri: &apos;mongodb://localhost/iotgo&apos;,   // MongoDB database address</div><div class="line">    options: &#123;</div><div class="line">      user: &apos;iotgo&apos;,                    // MongoDB database username</div><div class="line">      pass: &apos;iotgo&apos;                     // MongoDB database password</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  jwt: &#123;</div><div class="line">    secret: &apos;jwt_secret&apos;                // Shared secret to encrypt JSON Web Token</div><div class="line">  &#125;,</div><div class="line">  admin:&#123;</div><div class="line">    &apos;iotgo&apos;: &apos;iotgo&apos; // Administrator account of IoTgo platform</div><div class="line">  &#125;,</div><div class="line">  page: &#123;</div><div class="line">    limit: 50,                          // Default query page limit</div><div class="line">    sort: -1                            // Default query sort order</div><div class="line">  &#125;,</div><div class="line">  recaptcha: &#123;</div><div class="line">      secret: &apos;&apos;,                       // Google reCAPTCHA serect</div><div class="line">      url: &apos;https://www.google.com/recaptcha/api/siteverify&apos;</div><div class="line">    &#125;,</div><div class="line">  pendingRequestTimeout: 3000,</div><div class="line">  mailgun: &#123;</div><div class="line">          api_key:&apos;&apos;,                   //Mailgun API Key</div><div class="line">          domain:&apos;&apos;,                    //Mailgun Domain Name</div><div class="line">          from:&apos;&apos;                       //Mailgun Default SMTP Login Email</div><div class="line">  &#125;,</div><div class="line">  upgradeUrl:&quot;http://v.itead.cc/api/upgrade&quot;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>让Iotgo作为系统服务使用  </li>
</ul>
<p>创建开机启动项,编辑脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/init.d/iotgo</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">#</div><div class="line"># An init.d script for running a Node.js process as a service using Forever as</div><div class="line"># the process monitor. For more configuration options associated with Forever,</div><div class="line"># see: https://github.com/nodejitsu/forever</div><div class="line">#</div><div class="line"># This was written for Debian distributions such as Ubuntu, but should still</div><div class="line"># work on RedHat, Fedora, or other RPM-based distributions, since none of the</div><div class="line"># built-in service functions are used. So information is provided for both.</div><div class="line">#</div><div class="line"></div><div class="line">NAME=&quot;ITEAD IoTgo&quot;</div><div class="line">NODE_BIN_DIR=&quot;/usr/bin:/usr/local/bin&quot;</div><div class="line">NODE_PATH=&quot;/home/utopiaor/develop/IotGo/IoTgo/node_modules&quot;</div><div class="line">APPLICATION_PATH=&quot;/home/utopiaor/develop/IotGo/IoTgo/bin/www&quot;</div><div class="line">PIDFILE=&quot;/var/run/iotgo.pid&quot;</div><div class="line">LOGFILE=&quot;/var/log/iotgo.log&quot;</div><div class="line">MIN_UPTIME=&quot;5000&quot;</div><div class="line">SPIN_SLEEP_TIME=&quot;2000&quot;</div><div class="line"> </div><div class="line">PATH=$NODE_BIN_DIR:$PATH</div><div class="line">export NODE_PATH=$NODE_PATH</div><div class="line"> </div><div class="line">start() &#123;</div><div class="line">    echo &quot;Starting $NAME&quot;</div><div class="line">    forever \</div><div class="line">      --pidFile $PIDFILE \</div><div class="line">      -a \</div><div class="line">      -l $LOGFILE \</div><div class="line">      --minUptime $MIN_UPTIME \</div><div class="line">      --spinSleepTime $SPIN_SLEEP_TIME \</div><div class="line">      start $APPLICATION_PATH 2&gt;&amp;1 &gt; /dev/null &amp;</div><div class="line">    RETVAL=$?</div><div class="line">&#125;</div><div class="line"> </div><div class="line">stop() &#123;</div><div class="line">    if [ -f $PIDFILE ]; then</div><div class="line">        echo &quot;Shutting down $NAME&quot;</div><div class="line">        forever stop $APPLICATION_PATH 2&gt;&amp;1 &gt; /dev/null</div><div class="line">        rm -f $PIDFILE</div><div class="line">        RETVAL=$?</div><div class="line">    else</div><div class="line">        echo &quot;$NAME is not running.&quot;</div><div class="line">        RETVAL=0</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"> </div><div class="line">restart() &#123;</div><div class="line">    stop</div><div class="line">    start</div><div class="line">&#125;</div><div class="line"> </div><div class="line">status() &#123;</div><div class="line">    echo `forever list` | grep -q &quot;$APPLICATION_PATH&quot;</div><div class="line">    if [ &quot;$?&quot; -eq &quot;0&quot; ]; then</div><div class="line">        echo &quot;$NAME is running.&quot;</div><div class="line">        RETVAL=0</div><div class="line">    else</div><div class="line">        echo &quot;$NAME is not running.&quot;</div><div class="line">        RETVAL=3</div><div class="line">    fi</div><div class="line">&#125;</div><div class="line"> </div><div class="line">case &quot;$1&quot; in</div><div class="line">    start)</div><div class="line">        start</div><div class="line">        ;;</div><div class="line">    stop)</div><div class="line">        stop</div><div class="line">        ;;</div><div class="line">    status)</div><div class="line">        status</div><div class="line">        ;;</div><div class="line">    restart)</div><div class="line">        restart</div><div class="line">        ;;</div><div class="line">    *)</div><div class="line">        echo &quot;Usage: &#123;start|stop|status|restart&#125;&quot;</div><div class="line">        exit 1</div><div class="line">        ;;</div><div class="line">esac</div><div class="line">exit $RETVAL</div></pre></td></tr></table></figure>
<ul>
<li>添加可执行权限  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 755 /etc/init.d/iotgo</div></pre></td></tr></table></figure>
<ul>
<li>注册启动脚本  </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo update-rc.d iotgo defaults</div></pre></td></tr></table></figure>
<ul>
<li>测试   </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo systemctl daemon-reload</div><div class="line">sudo service iotgo start</div></pre></td></tr></table></figure>
<h3 id="测试iotgo"><a href="#测试iotgo" class="headerlink" title="测试iotgo"></a>测试iotgo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEBUG=&quot;iotgo&quot; ./bin/www</div></pre></td></tr></table></figure>
<ul>
<li>报错</li>
</ul>
<blockquote>
<p>1 Error: Cannot find module ‘../build/Release/bson’<br>2  Error: listen EACCES 0.0.0.0:80  </p>
</blockquote>
<p>对于1，没有安装bson，执行 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install bson</div></pre></td></tr></table></figure>
<p>，并修改</p>
<blockquote>
<p> (/home/utopiaor/develop/iot/IoTgo/node_modules/bson/ext/index.js:15:10)<br>bson = require(‘../build/Release/bson’); 为<br>bson = require(‘bson’);</p>
</blockquote>
<p>对于2,80端口被其他应用占用，kill 掉其应用  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof -n -P | grep 80</div></pre></td></tr></table></figure>
<p>然后kill掉相关进程<br>或者更改端口号为8080</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo PORT=&quot;8080&quot; DEBUG=&quot;iotgo&quot; ./bin/www</div></pre></td></tr></table></figure>
<p>出现打印</p>
<blockquote>
<p>iotgo Express server listening on port 80 +0ms</p>
</blockquote>
<p>证明iotgo环境已搭建成功</p>
<p>本机浏览器访问：localhost，局域网内访问192.168.0.10,发现进入的是nodejs的欢迎界面<br>更换端口号为8080，node默认占用80端口，或者kill掉node服务<br>关闭nodejs 服务 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop nodejs.service</div></pre></td></tr></table></figure>
<p>重新启动iotgo  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo PORT=&quot;8080&quot; DEBUG=&quot;iotgo&quot; ./bin/www</div></pre></td></tr></table></figure>
<p>出现iotgo定制页面,have a fun !<br><img src="https://i.imgur.com/6nlbqA5.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 物联网 </tag>
            
            <tag> Iotgo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第二话 你跟着我]]></title>
      <url>/2017/10/15/2017-10-15-13-12%E8%80%B3%E8%AF%AD%E3%80%81%E4%B8%80%E4%B8%96%E5%8A%AB-02/</url>
      <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="//music.163.com/outchain/player?type=2&id=29572804&auto=1&height=66"></iframe><br><strong>她的微笑</strong>很温暖，像一片彩虹，在他的心里慢慢升起，从左心房到右心房，他听到了自己的心跳声，咚咚。她的微笑很纯净，就像一泓清水从山涧里流淌出来，那种纯净永远也汇不进江河里，要用手鞠起来，捧在手心，搁在最明亮的眼睛里。那一刻，陈家晖的世界里时间仿佛停止了。他觉得心内的孤独少了几分。</p>
<p>他很想走过去，去跟那个女孩打一声招呼，那怕只说一句你好啊。可是他发现自己根本迈不开脚步。他感觉自己的手脚都被缚住了，一动也动不了。他只是看着那个女孩，看着她的笑容慢慢长大，慢慢凋落，慢慢消失，最后只剩下一张淡漠的脸。<br> <a id="more"></a><br>女孩的眼中闪过一丝轻蔑的神色，喝了一口咖啡，别过头，看向窗外。</p>
<p>窗外的阳光横斜着，照见两个人影，一对十指紧扣的情侣的影子，在水泥路上慢慢拉长，那一对紧握的双手影很久才没了形状。</p>
<p>女孩抿了一口咖啡，站起身来，像陈家晖走过来，眼神飘忽不定。</p>
<p>“你好，我可以在这里坐下来吗？跟你聊聊呢”女孩的声音很小，小到除了陈家晖，整个咖啡厅里的人都听不到。</p>
<p>“额… … 嗯，你好，我叫陈家晖，很高兴… …很高兴认识你。”他有点紧张，觉得心都快要蹦出来了，他有点吃惊，又觉得狂喜。他的心蹦出来了。</p>
<p>“你是不是老早就想跟我讲话了，你干嘛不上来跟我打招呼，要我来跟你打招呼呢，你真是个怪人呢。”女孩调笑着，眼中似乎有晶莹的东西在打转。</p>
<p>有些人你不熟悉，你甚至不认识他，但你见到他，会突然觉得心酸，想要流泪。这是一种记忆，潜藏在心房里，泪腺里，它不在回忆里。你不会明白这种感觉。直到你真切地感受到。</p>
<p>“我… …看到你，觉得特别熟悉，但我好像真的没有见过你。你是一个特别的人。”陈家晖好像在自言自语。</p>
<p>“哈哈，你是一个奇怪的人，我是一个特别的人，我们是这咖啡屋里的两个怪人吗，我叫宁沐，很高兴遇见你，怪人陈。”女孩笑看着陈家晖，她想跟他说，其实，我跟你的感觉一样。</p>
<p>“你好啊，宁沐。咖啡喝得差不多了，我想出去走走，你要你哪儿？”陈家晖觉得有点不自在，说了一句，又觉得说错了。他应该说什么呢，他什么都不用说。</p>
<p>“你跟着我呀！你不是一直跟着我的吗。”思涵挎起包，笑着走出去。笑声很大，回荡在咖啡屋里，屋子里仿佛多了一层春色。</p>
<p>这一次，陈家晖没有迟疑，他起身快步追了上去。</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 耳语、一世劫 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派系统安装与启动]]></title>
      <url>/2017/10/15/2017-10-15-12-00%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派系统安装与启动"><a href="#树莓派系统安装与启动" class="headerlink" title="树莓派系统安装与启动"></a>树莓派系统安装与启动</h2><p>树莓派没有板载flash、MMC和硬盘等存储设备，只支持SD卡启动<br>以下操作均在windows7 32位操作系统上进行</p>
<h3 id="1、安装准备工作"><a href="#1、安装准备工作" class="headerlink" title="1、安装准备工作"></a>1、安装准备工作</h3> <a id="more"></a> 
<ul>
<li>16G sanDisk Class4 SD卡  </li>
</ul>
<p>一张2G以上的SD卡及读卡器，最好是高速卡，推荐Class4以上的卡，卡的速度直接影响树莓派的运行速度，建议最好4G以上，否则后续开发会使用经常不够用   </p>
<ul>
<li>win7下安装镜像的工具：  <a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="external">Win32DiskImager</a>  </li>
</ul>
<ul>
<li>安装镜像下载：<a href="http://vx2-downloads.raspberrypi.org/raspbian/images/raspbian-2017-09-08/2017-09-07-raspbian-stretch.zip/" target="_blank" rel="external">raspberian</a>  </li>
</ul>
<h3 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h3><ul>
<li>解压下载的系统压缩文件，得到img镜像文件<br>我解压出的image镜像名为：2017-09-07-raspbian-stretch.img    </li>
<li>将SD装进读卡器，插入电脑的USB口中</li>
<li>打开win32diskimager，选择SD卡设备和image镜像，写入<br><img src="https://i.imgur.com/59COgTE.png" alt=""></li>
</ul>
<hr>
<p><strong>Tips：</strong>  </p>
<pre><code>写入需要等待一段时间，安装结束后会弹出完成对话框，说明安装就完成了，如果不成功，请关闭防火墙一类的软件，重新插入SD进行安装  
请注意安装完，win系统下看到SD只有74MB了，这是正常现象，因为linux下的分区win下是看不到的！
</code></pre><hr>
<h3 id="3、树莓派启动"><a href="#3、树莓派启动" class="headerlink" title="3、树莓派启动"></a>3、树莓派启动</h3><h4 id="树莓派供电"><a href="#树莓派供电" class="headerlink" title="树莓派供电"></a>树莓派供电</h4><p>树莓派开发板有两种供电方式：  </p>
<ul>
<li>micro usb供电<br>所有android手机的充电线都可以给他供电    </li>
<li>外接电源<br>B型（B+型）GPIO 左上角的2、4管角为电源正极，6管角为地<br><img src="https://i.imgur.com/kAtXIIm.png" alt="">    <h4 id="访问树莓派"><a href="#访问树莓派" class="headerlink" title="访问树莓派"></a>访问树莓派</h4></li>
<li>外接HDMI或者AV显示器，USB鼠标、键盘<br>把树莓派当作一个小电脑，可以用外接键盘、鼠标操作树莓派，树莓派启动界面会显示在HDMI或者AV显示器上    </li>
<li>使用USB转ttl 串口线通过串口访问树莓派  </li>
<li>通过USB转TTL转接线，将树莓派的串口连接到电脑上，通过串口工具访问<br>推荐使用<a href="https://mobaxterm.mobatek.net/" target="_blank" rel="external">MobaXterm</a>这款开源集成工具，非常好用！<br>树莓派串口连接口请见下图中所示<br><img src="https://i.imgur.com/KY8zajL.png" alt="">  </li>
<li>通过网络访问<br>如果没有显示器等设备，可以通过网络方式访问树莓派，通过SSH、VNC和远程桌面来连接，不仅方便、经济，还有利于后续开发 </li>
</ul>
<hr>
<p><strong>Tips</strong>  </p>
<pre><code>树莓派默认不开启SSH，可在SD卡的根目录下创建一个名为ssh的空文件，这样开机便启动ssh服务了，树莓派的ip可通过路由器查看
windows下是无法访问linux分区的，这时候你需要一台linux主机，或者用虚拟机吧！  
</code></pre><blockquote>
<ul>
<li>SSH<br>  由于树莓派只有一个串口，当我们开发中需要占用这个串口或者我们希望进行远程开发（通过一个根网线或无线连接到树莓派），可以借助Linux系统特有的一种服务SSH来完成  </li>
<li>VNC<br>  VNC是linux下面常用的远程桌面，用它可以在windows或者unix主机上方便的通过网络操作远程主机而不需要一个额外的显示器，非常实用  </li>
<li>远程桌面<br>  远程桌面是windows自带的一个远程桌面登陆系统，很好用</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[树莓派简介]]></title>
      <url>/2017/10/14/2017-10-14-14-40%E6%A0%91%E8%8E%93%E6%B4%BE%E7%AE%80%E4%BB%8B/</url>
      <content type="html"><![CDATA[<h1 id="玩转树莓派"><a href="#玩转树莓派" class="headerlink" title="玩转树莓派"></a>玩转树莓派</h1><h2 id="树莓派简介"><a href="#树莓派简介" class="headerlink" title="树莓派简介"></a>树莓派简介</h2><h3 id="1、树莓派是什么"><a href="#1、树莓派是什么" class="headerlink" title="1、树莓派是什么"></a>1、树莓派是什么</h3><p>Raspberry Pi(中文名为“树莓派”,简写为RPi，或者RasPi/RPi)是为学生计算机编程教育而设计，只有信用卡 大小的卡片式电脑，其系统基于Linux。<br>树莓派由注册于英国的慈善组织“Raspberry Pi 基金会”开发，Eben·Upton/埃·厄普顿为项目带头人。2012年3月，英国剑桥大学埃本·阿普顿（Eben Epton）正式发售世界上最小的台式机，又称卡片式电脑，外形只有信用卡大小，却具有电脑的所有基本功能，这就是Raspberry Pi电脑板，中文译名”树莓派”！这一基金会以提升学校计算机科学及相关学科的教育，让计算机变得有趣为宗旨。基金会期望这 一款电脑无论是在发展中国家还是在发达国家，会有更多的其它应用不断被开发出来，并应用到更多领域。<br> <a id="more"></a>  </p>
<pre><code>一句话：树莓派是一个卡片大小的开发板，上面可以运行Linux系统，我们可以用它开发我想要的设备。  
</code></pre><p>以下是树莓派2B的实物图<br><img src="https://i.imgur.com/Qe4uDAe.png" alt=""></p>
<h3 id="2、树莓派的种类"><a href="#2、树莓派的种类" class="headerlink" title="2、树莓派的种类"></a>2、树莓派的种类</h3><p>A型：1个USB、无有线网络接口、功率2.5W,500mA、256MB RAM（基本已经见不到了）<br>B型：2个USB、支持有线网络、功率3.5W，700mA、512MB RAM、26个GPIO(市售还有很多)。<br>B+型：4个USB口、支持有线网络，功耗1W，512M RAM 40个GPIO（2014新出的，推荐使用）<br>购买请在淘宝上搜一下，非常多：200到–300元之间（裸板，不含SD卡、电源）<br><img src="https://i.imgur.com/bB5P7Jv.png" alt="raspberry1"></p>
<h3 id="3、树莓派参数"><a href="#3、树莓派参数" class="headerlink" title="3、树莓派参数"></a>3、树莓派参数</h3><p>B型：<br>处理器<br>BroadcomBCM2835（CPU，GPU，DSP和SDRAM，USB）<br>CPU<br>ARM1176JZF-S核心（ARM11系列）700MHz<br>GPU<br>Broadcom VideoCrore IV，OpenGL ES 2.0,1080p 30 h.264/MPEG-4 AVC高清解码器<br>内存<br>512MByte<br>USB 2.0<br>2（支持USB hub扩展）<br>影像输出<br>Composite RCA（PAL &amp; NTSC），HDMI（rev 1.3 &amp; 1.4），raw LCD Panels via DSI 14 HDMI resolution from 640x350 to 1920x1200 plus various PAL andNTSC standards<br>音源输出<br>3.5mm插孔，HDMI<br>板载存储<br>SD/MMC/SDIO卡插槽<br>网络接口<br>10/100以太网接口<br>外设<br>8xGPIO、UART、I2C、带两个选择的SPI总线，+3.3V，+5V，ground（负极）<br>额定功率<br>700mA（3.5W）<br>电源输入<br>5V / 通过MicroUSB或GPIO头<br>总体尺寸<br>85.60 x 53.98 mm（3.370 x 2.125 in）<br>操作系统<br>Debian GNU/linux，Fedora，Arch Linux ARM，RISC OS, XBMC</p>
<p>B+改进<br>• 更多的GPIO：B+将通用输入输出引脚增加到了40个，而Model B则只有26个；<br>• 更多的USB：B+提供了4个USB端口，对热插拔有着更好的兼容性(Model B只有2个)；<br>• 支持microSD：旧款的SD卡插槽，已经被换成了更漂亮的推入式microSD卡槽；<br>• 更低的功耗：将线性式稳压器换成了开关式，功耗降低了0.5W到1W；<br>• 更好的音频：音频电路部分采用了专用的低噪供电；<br>• 简洁的外形：USB接口被推到了主板的一边，复合视频移到了3.5mm音频口的位置，此外还增加了4个独立的安装孔。  </p>
<h3 id="4、树莓派分布图"><a href="#4、树莓派分布图" class="headerlink" title="4、树莓派分布图"></a>4、树莓派分布图</h3><p>B型，B+类似，请自行对比参考<br><img src="https://i.imgur.com/073ZyQ6.png" alt="raspberry2">  </p>
<h3 id="5、支持的操作系统"><a href="#5、支持的操作系统" class="headerlink" title="5、支持的操作系统"></a>5、支持的操作系统</h3><p> 树莓派支持多种操作系统，如官方操作系统为raspberryPi,ubuntu，Window10 IOT和google定制android等<br><img src="https://i.imgur.com/TtiGDU8.png" alt="">  </p>
<h3 id="6、各代产品的对比"><a href="#6、各代产品的对比" class="headerlink" title="6、各代产品的对比"></a>6、各代产品的对比</h3><p><img src="https://i.imgur.com/ozJRpEz.png" alt="">  </p>
<h3 id="7、树莓派的用途"><a href="#7、树莓派的用途" class="headerlink" title="7、树莓派的用途"></a>7、树莓派的用途</h3><p>• 树莓派编程<br><img src="https://i.imgur.com/gDrSD0z.png" alt=""><br>• 树莓派外接传感器<br><img src="https://i.imgur.com/pizReHj.png" alt=""><br>• 树莓派网络监控<br><img src="https://i.imgur.com/1ZjQQex.png" alt=""><br>• 树莓派网络小车<br><img src="https://i.imgur.com/FYCGO05.png" alt=""><br>• 树莓派科学上网<br><img src="https://i.imgur.com/IGFX5Sm.png" alt=""><br>• 树莓派网络电视盒子<br><img src="https://i.imgur.com/QGHaeCP.png" alt=""><br>• 树莓派路由器<br><img src="https://i.imgur.com/1ersydG.png" alt="">  </p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 玩转树莓派 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Test eaasy]]></title>
      <url>/2017/10/12/test/</url>
      <content type="html"><![CDATA[<p>just for test essay !!!</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[第一话 匆匆一眼]]></title>
      <url>/2017/10/11/2017-10-11-18-46%E8%80%B3%E8%AF%AD%E3%80%81%E4%B8%80%E4%B8%96%E5%8A%AB-01/</url>
      <content type="html"><![CDATA[<p><strong>四月</strong>多雨的季节，好不容易迎来一次碧空如洗的晴天，仿佛睡着的城市一下子醒了过来。陈家晖也好不容易忙完了手头的工作，呆呆地站在十一楼的窗前，他心里空落落的。点了一根烟，吸了一口，觉得有点头晕，就扔了。</p>
<p>那一刻，他想要跳下去。有时候他真觉得自己会从那里跳下去。他很孤独，在喧闹的人群里，他的微笑让所有人都觉得他是个很温和很开心的人。只有他自己知道，他孤独得快要死掉。<br> <a id="more"></a><br>孤独要藏住，仿佛是一件很丢脸的事。可是，谁不是孤独的呢？越是孤独地人越会笑，他怕人看到。<br>他突然想出去走走，喝杯咖啡，去看看路上的人群，去看那些迟春的花朵。</p>
<p>他很少出门，每次出门都会穿得整整齐齐的，用妮维维洁一次面，再用碧欧泉控油，用Sukin洗发水认真地洗一次头，喷上KENZO香水，打扮得很漂亮。他工作的时候很随意，随意的穿着，随意地写代码，随意地例行公事，随意的应付别人，一切都理所当然。但是今天不一样，他觉得很重要，所以要穿得好看点。</p>
<p>人的外貌不是重要的，但是面貌很重要。外貌可以张扬，可以温煦，可以冷峻，可以帅气，甚至可以猥琐，但是面貌一定要健康。对，这很重要，他很健康。</p>
<p>他走过汹涌的人群，看到一个背影，头发束起来，穿着蓝色连衣裙，肩上背着黄色的Cambridge Satchel的包包。他觉得那个女孩很熟悉，仿佛在哪里见过，他没有走上去，只是跟着那个女孩。</p>
<p>他一直走在女孩后面，差不多3米的距离，刻意保持着和女孩同样的脚步频率。在人少的地方，女孩似乎觉得有人在跟着她，回过了头，眼睛刚好落在陈家晖的身上。女孩停顿了3秒针，眼中掠过一阵不知名的神色，然后别过头，继续往前走。</p>
<p>陈家晖没有再跟，他停下来，在路边的休息椅上坐了下来。他点了一根烟，抽了一口，觉得头晕，扔掉了。他的脑海里突然浮现那个女孩的脸，他觉得有点窒息。他起身跑起来，要去追上那个女孩，他要追上去跟那个女孩说，嗨，你好，我叫陈家晖，我想认识你。<br>前面只有汹涌的人群，你追不上任何人。他觉得有点失落。他恨自己。</p>
<p>走在星巴克的门口，他停了下来，看了看手表，下午四点半，应该去喝杯咖啡。他去咖啡厅只会喝espresso，要double espreso，配一杯温水。第一份espreso他要一口闷掉，他贪恋这种味道，像毒药，仿佛喝下去就会死掉，可他每次都活着，他觉得很开心。然后他会喝几口温水，再慢慢地品尝第二份咖啡，那种苦感，与他的孤独同味。</p>
<p>他一口喝掉那份espresso，抬起头，看到那个穿着蓝色连衣裙的姑娘。</p>
<p>她在对他笑。</p>
]]></content>
      
        <categories>
            
            <category> 文章 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 耳语、一世劫 </tag>
            
            <tag> 小说 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/10/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2> <a id="more"></a> 
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> 技术 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
